import java.util.regex.Pattern
group 'org.blockchain_monitoring'
version = '2.0.15'

buildscript {
    repositories {
        maven {
            url "${nexusUrl}/content/groups/public/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

def springVersion = "4.3.7.RELEASE"

repositories {
    maven {
        url "${nexusUrl}/content/groups/public/"
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter")
    compile "org.springframework:spring-context:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"
    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework:spring-core:${springVersion}"
    compile "org.springframework:spring-beans:${springVersion}"
    compile "org.springframework:spring-aspects:${springVersion}"
    compile "org.springframework:spring-messaging:${springVersion}"
    compile "org.springframework:spring-websocket:${springVersion}"
    compile "org.influxdb:influxdb-java:2.5"
    compile "commons-logging:commons-logging:1.2"
    compile "org.blockchain_monitoring:blockchain-monitoring-api:2.0.5"
    compile "org.blockchain_monitoring:fly-client-spring:2.0.26"
    compile "org.blockchain_monitoring:fly-client:2.0.70"
}

apply plugin: 'docker'

jar {
    baseName = 'blockchain-monitoring'
    version =  '1.0.0'
}

springBoot {
    mainClass = "org.blockchain_monitoring.Application"
}

docker {
    baseImage = 'java:8'
}

task buildDocker(type: Docker, dependsOn: build) {
    exposePort 8080
    addFile jar.archivePath, jar.archiveName
    entryPoint(["java", "-jar", jar.archiveName])
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(
                    url: "${nexusUrl}/content/repositories/releases") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
            snapshotRepository(
                    url: "${nexusUrl}/content/repositories/snapshots") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
        }
    }
}

task incrementPointNumberInVersionName << {
    println(":incrementVersionName - Incrementing Poin Version ...")
    def buildFile = file("build.gradle")
    def patternVersionNumber = Pattern.compile("version = '(\\d+)\\.(\\d+)\\.(\\d+)'")
    def buildScript = buildFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(buildScript)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def mVersionName = majorVersion + "." + minorVersion + "." + pointVersion
    def mNextVersionName = majorVersion + "." + minorVersion + "." + (pointVersion + 1)
    def content = matcherVersionNumber.replaceAll("version = \'" + mNextVersionName + "\'")
    println(":incrementVersionName - new versionName=" + mNextVersionName);
    buildFile.write(content)
}

task incrementMinorNumberInVersionName << {
    println(":incrementVersionName - Incrementing Minor Version ...")
    def buildFile = file("build.gradle")
    def patternVersionNumber = Pattern.compile("version = '(\\d+)\\.(\\d+)\\.(\\d+)'")
    def buildScript = buildFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(buildScript)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def mNextVersionName = majorVersion + "." + (minorVersion + 1) + ".0"
    def content = matcherVersionNumber.replaceAll("version = \'" + mNextVersionName + "\'")
    println(":incrementVersionName - new versionName=" + mNextVersionName);
    buildFile.write(content)
}

task incrementMajorNumberInVersionName << {
    println(":incrementVersionName - Incrementing Major Version ...")
    def buildFile = file("build.gradle")
    def patternVersionNumber = Pattern.compile("version = '(\\d+)\\.(\\d+)\\.(\\d+)'")
    def buildScript = buildFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(buildScript)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def mNextVersionName = (majorVersion + 1) + ".0.0"
    def content = matcherVersionNumber.replaceAll("version = \'" + mNextVersionName + "\'")
    println(":incrementVersionName - new versionName=" + mNextVersionName);
    buildFile.write(content)
}

